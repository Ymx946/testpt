package com.mz.common.util.map.utils;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MapUtil {

    /**
     * 给定点和多边形，判断给定的点是否在多边形内
     *
     * @param point
     * @param points
     * @return
     */
    public static boolean isPointInPolygon(Point point, List<Point> points) {

        boolean result = false;
        int intersectCount = 0;
        // 判断依据：求解从该点向右发出的水平线射线与多边形各边的交点，当交点数为奇数，则在内部
        // 不过要注意几种特殊情况：1、点在边或者顶点上;2、点在边的延长线上;3、点出发的水平射线与多边形相交在顶点上
        /**
         * 具体步骤如下： 循环遍历各个线段： 1、判断点是否在当前边上(斜率相同,且该点的x值在两个端口的x值之间),若是则返回true
         * 2、否则判断由该点发出的水平射线是否与当前边相交,若不相交则continue
         * 3、若相交,则判断是否相交在顶点上(边的端点是否在给定点的水平右侧).若不在,则认为此次相交为穿越,交点数+1 并continue
         * 4、若交在顶点上,则判断上一条边的另外一个端点与当前边的另外一个端点是否分布在水平射线的两侧.若是则认为此次相交为穿越,交点数+1.
         */
        for (int i = 0; i < points.size(); i++) {
            Point pointA = points.get(i);
            Point pointB = null;
            Point pointPre = null;
            // 若当前是第一个点,则上一点则是list里面的最后一个点
            if (i == 0) {
                pointPre = points.get(points.size() - 1);
            } else {
                pointPre = points.get(i - 1);
            }
            // 若已经循环到最后一个点,则与之连接的是第一个点
            if (i == (points.size() - 1)) {
                pointB = points.stream().findFirst().get();
            } else {
                pointB = points.get(i + 1);
            }
            Line line = Line.getClone(pointA, pointB);
            // 1、判断点是否在当前边上(斜率相同,且该点的x值在两个端口的x值之间),若是则返回true
            boolean isAtLine = line.isContainsPoint(point);
            if (isAtLine) {
                return true;
            } else {
                // 2、若不在边上,判断由该点发出的水平射线是否与当前边相交,若不相交则continue
                // 设置该射线的另外一个端点的x值=999,保证边的x永远不超过
                Point radialPoint = Point.getClone(999d, point.Y);
                Line radial = Line.getClone(point, radialPoint);
                boolean isIntersect = radial.isIntersect(line);
                if (!isIntersect) {
                    continue;
                } else {
                    // 3、若相交,则判断是否相交在顶点上(边的端点是否在给定点的水平右侧).若不在,则认为此次相交为穿越,交点数+1 并continue
                    if (!((pointA.X > point.X) && (pointA.Y.equals(point.Y)) || (pointB.X > point.X) && (pointB.Y.equals(point.Y)))) {
                        intersectCount++;
                        continue;
                    } else {
                        // 4、若交在顶点上,则判断上一条边的另外一个端点与当前边的另外一个端点是否分布在水平射线的两侧.若是则认为此次相交为穿越,交点数+1
                        if ((pointPre.Y - point.Y) * (pointB.Y - point.Y) < 0) {
                            intersectCount++;
                        }
                    }
                }
            }
        }
        result = intersectCount % 2 == 1;
        return result;
    }

    /**
     * 多边形重心
     */
    public static String getCenterPoint(String lonlat) {
        List<double[]> coordinateList = new ArrayList<>();

        String[] temp = lonlat.split(" ");

        for (String t : temp) {
            double[] data = new double[2];
            String[] split = t.split(",");
            data[0] = Double.parseDouble(split[0]);
            data[1] = Double.parseDouble(split[1]);
            coordinateList.add(data);
        }

        int total = coordinateList.size();
        //多边形面积
        double area = 0.0;
        // 重心的x、y
        double x = 0.0;
        double y = 0.0;

        for (int i = 1; i <= total; i++) {
            double iLat = coordinateList.get(i % coordinateList.size())[1];
            double iLng = coordinateList.get(i % coordinateList.size())[0];
            double nextLat = coordinateList.get(i - 1)[1];
            double nextLng = coordinateList.get(i - 1)[0];
            double t = (iLat * nextLng - iLng * nextLat) / 2.0;
            area += t;
            x += t * (iLat + nextLat) / 3.0;
            y += t * (iLng + nextLng) / 3.0;
        }
        x = x / area;
        y = y / area;
        return y + "," + x;
    }

    /**
     * 多边形中心
     */
    public static String getCentralPoint(String lonlat) {
        List<double[]> coordinateList = new ArrayList<>();

        String[] temp = lonlat.split(" ");

        for (String t : temp) {
            double[] data = new double[2];
            String[] split = t.split(",");
            data[0] = Double.parseDouble(split[0]);
            data[1] = Double.parseDouble(split[1]);
            coordinateList.add(data);
        }

        int total = coordinateList.size();
        double X = 0;
        double Y = 0;
        double Z = 0;
        for (double[] coordinate : coordinateList) {
            double lat = coordinate[1] * Math.PI / 180;
            double lon = coordinate[0] * Math.PI / 180;
            X += Math.cos(lat) * Math.cos(lon);
            Y += Math.cos(lat) * Math.sin(lon);
            Z += Math.sin(lat);
        }
        X = X / total;
        Y = Y / total;
        Z = Z / total;
        double lon2 = Math.atan2(Y, X);
        double hyp = Math.sqrt(X * X + Y * Y);
        double lat2 = Math.atan2(Z, hyp);
        double longitude = lon2 * 180 / Math.PI;
        double latitude = lat2 * 180 / Math.PI;
        NumberFormat nf = NumberFormat.getInstance();
        nf.setGroupingUsed(false);
        nf.setMinimumFractionDigits(12);
        return nf.format(longitude) + "," + nf.format(latitude);
    }

    private static double ConvertToRadian(double input) {
        return input * Math.PI / 180;
    }

    /**
     * 根据经纬度计算多边形的面积 平方米
     *
     * @param data
     * @return
     */
    public static BigDecimal CalculatePolygonArea(String data) {
        double area = 0;
        String[] nameArr = data.split(";| ");
        int arr_len = nameArr.length;
        if (arr_len < 3) {
            return new BigDecimal(0);
        }

        List<String> temp = new ArrayList<>();
        Collections.addAll(temp, nameArr);
        for (int i = 0; i < arr_len; i++) {
            String[] lgltAry0 = temp.get((i) % arr_len).split(",");
            String[] lgltAry1 = temp.get((i + 1) % arr_len).split(",");
            area += ConvertToRadian(Double.parseDouble(lgltAry1[0]) - Double.parseDouble(lgltAry0[0])) * (2 + Math.sin(ConvertToRadian(Double.parseDouble(lgltAry0[1]))) + Math.sin(ConvertToRadian(Double.parseDouble(lgltAry1[1]))));
        }
        area = area * 6378137.0 * 6378137.0 / 2.0;
        return new BigDecimal(area).abs().setScale(6, RoundingMode.HALF_UP);
    }

    public static void main(String[] args) {
        String lonlat = "120.0145870721335,28.90803295674822 120.0145731984339,28.90826535030738 120.0145662656603,28.90841823880736 120.0145106837444,28.90856502252898 120.0145176452052,28.90863229159238 120.0144968329137,28.90874236629561 120.0144273391066,28.90879129725641 120.0142535888794,28.9088157756996 120.0141531344682,28.90881982655898 120.0141006903879,28.90882193790619 120.0139749097455,28.90881668008145 120.0139868924508,28.90877118749 120.0139868876481,28.90873537726434 120.0140479280325,28.90871448206465 120.0141600424343,28.90869102992022 120.0141631844411,28.90863231850229 120.0141840179,28.90847943036926 120.0142673995156,28.90832653742343 120.0142673827831,28.90820422686275 120.0142882275578,28.90807579684601 120.0143299081047,28.90794856640327 120.0144167221476,28.90791514147593 120.0145517670667,28.90793537340398 120.0145870721335,28.90803295674822";
        lonlat = "120.1269184706735,28.80736040063481,0 120.126678738822,28.80735261012337,0 120.1266795497472,28.80735144003282,0 120.1267538314441,28.80714845011947,0 120.126760430241,28.80699924161384,0 120.1267534186491,28.80680230186521,0 120.1266855298462,28.80668897038525,0 120.1266177309941,28.80666517100374,0 120.1266108588097,28.80658161097676,0 120.1265836104241,28.80645630982623,0 120.1265143507416,28.80643824923652,0 120.12640046118,28.80640854071668,0 120.1263124918257,28.80639689005601,0 120.1262855615183,28.80654014100071,0 120.126095850461,28.80654629039423,0 120.126048061516,28.80625390062731,0 120.1263467805173,28.80624034101528,0 120.1263184405036,28.80615152102807,0 120.1262316104139,28.80607522046756,0 120.1259521011743,28.80606934976539,0 120.1257979808668,28.80606611901109,0 120.1256165001989,28.80598321054064,0 120.1255267597928,28.80594220866954,0 120.1256132912341,28.80587849263981,0 120.125622100336,28.80587464261707,0 120.1258097901696,28.80579262106384,0 120.1259582109391,28.80570000094611,0 120.1262275513757,28.80552832074837,0 120.1264203816633,28.80539727100523,0 120.1265834407712,28.80525309845209,0 120.1266276007493,28.8053348298338,0 120.1267496214366,28.80538126927665,0 120.126816309618,28.80544443888631,0 120.1268556794085,28.80542512058663,0 120.1268330805831,28.80559667872549,0 120.1267655310597,28.80577578136936,0 120.1269692095589,28.80610383058891,0 120.1273149990603,28.80600087909982,0 120.1273499512732,28.80605353003447,0 120.1275147598784,28.80606091014791,0 120.127567649454,28.80608950154276,0 120.1277668795586,28.80610722030374,0 120.12790095179,28.80603906019239,0 120.1280463392129,28.80600031915329,0 120.1281331400886,28.80602157074949,0 120.1282036604642,28.80606447937463,0 120.1282633007364,28.80607874069839,0 120.1283770817801,28.80603566148475,0 120.1284583905254,28.80603558955529,0 120.1285505305484,28.80602594961692,0 120.1285884412984,28.80599726944468,0 120.1286240805853,28.80592739059658,0 120.1286641306131,28.8058348607928,0 120.1287074104565,28.80576320079482,0 120.1287561109413,28.80569631218053,0 120.1288210804271,28.80562941073195,0 120.1289131004778,28.80552428170711,0 120.129015990654,28.8054430205599,0 120.1291189308263,28.80539995107879,0 120.1292218914033,28.80537597965167,0 120.1292977807212,28.80537590969823,0 120.1293628606788,28.80539972026898,0 120.1292220094689,28.80546669192588,0 120.1290920391637,28.80556708088719,0 120.1290054184878,28.80565788058347,0 120.1290054997926,28.80572472087737,0 120.1288863412741,28.80580600115508,0 120.1288485200852,28.80590152981638,0 120.1287553512411,28.806078259681,0 120.1286670404566,28.8062347715035,0 120.1285288404779,28.80625638958175,0 120.1283662800098,28.80630668016433,0 120.1282605796036,28.80630677972601,0 120.1281709917451,28.80619227951961,0 120.1280409515308,28.8062353703719,0 120.1280248908951,28.80640010139452,0 120.1280250896439,28.80655766116463,0 120.1278868587687,28.80655779127991,0 120.1276672201113,28.80659221108204,0 120.1276958986629,28.80664679147392,0 120.1277611007242,28.80678042043534,0 120.1276203397271,28.80692378923813,0 120.1273278505142,28.80712459011386,0 120.1274563786545,28.80725367974748,0 120.1269184706735,28.80736040063481,0 ";
        String[] nameArr = lonlat.split(";| ");

//		System.out.println(getCenterPoint(lonlat));
        System.out.println(CalculatePolygonArea(lonlat));
/*
		Long start = System.currentTimeMillis();
		String polygons = "\"119.875831272963,28.491897561015,0;119.87725990346,28.4918988581484,0;119.877479103844,28.4923129799087,0;119.875725760165,28.4938287367502,0;119.87562357469,28.4937717642415,0;119.875372688346,28.4935954484359,0;119.875314719852,28.4935615283715,0;119.875251016125,28.4935317362567,0;119.875187147507,28.4934986790834,0;119.87516777271,28.4934876470118,0;119.875096900872,28.4934420230444,0;119.875061841804,28.4934033923261,0;119.875012037222,28.4933281422538,0;119.875001009878,28.4932626412171,0;119.875007965721,28.4931646429866,0;119.874995874971,28.4930896495388,0;119.874956482436,28.492970340355,0;119.874904976963,28.4929054348213,0;119.874866334959,28.4928677499095,0;119.874804237657,28.4928289548808,0;119.874785261608,28.4928213442684,0;119.87501167619,28.4924430109584,0;119.875831272963,28.491897561015,0\",\n";
		polygons = "\"119.940664246615,28.433960718504,0;119.942281840578,28.4355339809196,0;119.942303649184,28.435553790447,0;119.942326934113,28.4355722404192,0;119.942351587135,28.4355892450781,0;119.942377493658,28.4356047253835,0;119.942404533267,28.4356186093806,0;119.942432580277,28.4356308325344,0;119.942461504322,28.4356413380298,0;119.942491170958,28.4356500770357,0;119.94252144229,28.4356570089317,0;119.942552177613,28.4356621014974,0;119.942583234064,28.4356653310616,0;119.942614467288,28.4356666826128,0;119.942645732107,28.4356661498689,0;119.942676883197,28.435663735306,0;119.942707775764,28.4356594501475,0;119.942738266214,28.4356533143114,0;119.942768212822,28.4356453563181,0;119.942797476392,28.4356356131576,0;119.942825920903,28.4356241301176,0;119.943140639342,28.4354775798361,0;119.943161745627,28.4354669400898,0;119.943182000477,28.4354550775346,0;119.94320131336,28.4354420451908,0;119.943219597957,28.4354279013075,0;119.943236772544,28.4354127091015,0;119.943252760359,28.4353965364756,0;119.943267489945,28.4353794557141,0;119.943280895465,28.4353615431606,0;119.943292917006,28.4353428788761,0;119.943303500836,28.4353235462819,0;119.943312599651,28.4353036317859,0;119.943320172785,28.4352832243968,0;119.94332618639,28.4352624153266,0;119.943330613589,28.4352412975823,0;119.943333434595,28.4352199655506,0;119.9433346368,28.4351985145757,0;119.943334214833,28.4351770405337,0;119.94333217058,28.4351556394034,0;119.943328513179,28.4351344068379,0;119.943323258978,28.4351134377368,0;119.943316431461,28.435092825822,0;119.943308061146,28.435072663219,0;119.943298185444,28.435053040045,0;119.941918219826,28.4333154365367,0;119.941906377067,28.4333015643087,0;119.941893483715,28.4332884443777,0;119.941879600747,28.4332761387925,0;119.94186479382,28.4332647057504,0;119.941849132963,28.4332541993222,0;119.94183269224,28.4332446691963,0;119.941815549406,28.4332361604441,0;119.941797785535,28.4332287133063,0;119.941779484639,28.4332223630029,0;119.941760733269,28.4332171395667,0;119.941741620106,28.433213067701,0;119.941722235544,28.4332101666631,0;119.941702671258,28.433208450173,0;119.941683019774,28.4332079263485,0;119.941663374031,28.4332085976669,0;119.94164382694,28.4332104609535,0;119.941624470945,28.4332135073959,0;119.941605397589,28.4332177225867,0;119.941586697075,28.4332230865908,0;119.941568457844,28.4332295740399,0;119.941550766156,28.4332371542527,0;119.941533705681,28.4332457913798,0;119.940738267199,28.4334538898711,0;119.940717906939,28.4334598881005,0;119.940698054162,28.4334670939762,0;119.940678800421,28.433475474268,0;119.940660234504,28.4334849903299,0;119.940642442029,28.4334955982785,0;119.940625505047,28.4335072491947,0;119.940609501664,28.4335198893501,0;119.940594505679,28.433533460454,0;119.940580586249,28.4335478999228,0;119.940567807563,28.4335631411685,0;119.940556228551,28.4335791139052,0;119.940545902612,28.4335957444742,0;119.940536877363,28.4336129561828,0;119.940529194427,28.4336306696584,0;119.940522889233,28.4336488032144,0;119.94051799086,28.4336672732271,0;119.940514521897,28.4336859945209,0;119.940512498343,28.4337048807617,0;119.940511929529,28.4337238448543,0;119.94051281808,28.4337427993448,0;119.940515159899,28.4337616568234,0;119.940518944188,28.4337803303274,0;119.940524153495,28.4337987337428,0;119.940530763798,28.433816782201,0;119.940538744614,28.4338343924702,0;119.940548059139,28.4338514833393,0;119.94055866442,28.4338679759925,0;119.94057051155,28.4338837943725,0;119.940583545895,28.4338988655317,0;119.940597707348,28.4339131199681,0;119.940612930601,28.4339264919462,0;119.940629145452,28.4339389197999,0;119.940646277124,28.4339503462172,0;119.940664246615,28.433960718504,0\"";

		List<String> list = new ArrayList<>();
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);
		list.add(polygons);

		for (String p : list) {
			p = p.replaceAll("\"", "");
			String[] split = p.split(";");

			List<Point> points = new ArrayList<>();
			for (String item : split) {
				String[] lanLat = item.split(",");
				Point point = new Point(Double.parseDouble(lanLat[0]), Double.parseDouble(lanLat[1]));
				points.add(point);
			}

			Point test = new Point(119.87562357469, 28.49377176424);
			System.out.println(isPointInPolygon(test, points));
		}

		System.out.println("==========运行时间==========" + (System.currentTimeMillis() - start));*/
    }

}
